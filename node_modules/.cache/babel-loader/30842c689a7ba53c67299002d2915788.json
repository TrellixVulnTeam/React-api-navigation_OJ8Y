{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/Reactjs&Native/Cours-React/src/components/Countries.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countries = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [sortedData, setSortedData] = useState([]);\n  const [playOne, setPlayOne] = useState(true);\n  const [rangeValue, setRangeValue] = useState('40');\n  const [selectedRadio, setSelectedRadio] = useState('');\n  const radios = ['Africa', 'America', 'Europe', 'Asia', 'Oceania'];\n  useEffect(() => {\n    if (playOne) {\n      axios.get(\"http://restcountries.eu/rest/v2/all?fields=name;population;region;capital;flag\").then(res => {\n        setData(res.data);\n        setPlayOne(false);\n      });\n    }\n\n    const sortedcountry = () => {\n      const countryObj = Object.keys(data).map(i => data[i]);\n      const sortedArray = countryObj.sort((a, b) => {\n        return b.population - a.population;\n      });\n      sortedArray.length = rangeValue;\n      setSortedData(sortedArray);\n    };\n\n    sortedcountry();\n  }, [data, playOne, rangeValue]);\n\n  const handleRangeValue = e => {\n    setRangeValue(e.target.value);\n  };\n\n  const handleSelectedRadio = e => {\n    setSelectedRadio(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countries\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sort-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"250\",\n        value: rangeValue,\n        onChange: handleRangeValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: radios.map(r => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: r,\n            id: r,\n            checked: r === selectedRadio,\n            onChange: handleSelectedRadio\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: r,\n            children: r\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, r, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cancel\",\n      children: selectedRadio && /*#__PURE__*/_jsxDEV(\"h5\", {\n        onClick: () => {\n          setSelectedRadio(\"\");\n        },\n        children: \"Annuler la recherche\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"countries-list\",\n      children: sortedData.filter(country => country.region.includes(selectedRadio)).map(country => /*#__PURE__*/_jsxDEV(Card, {\n        countrie: country\n      }, country.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Countries, \"Qv/REZLd2GM/ac885Fm+RxoleJs=\");\n\n_c = Countries;\nexport default Countries;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"sources":["/opt/lampp/htdocs/Reactjs&Native/Cours-React/src/components/Countries.js"],"names":["React","useState","useEffect","axios","Card","Countries","data","setData","sortedData","setSortedData","playOne","setPlayOne","rangeValue","setRangeValue","selectedRadio","setSelectedRadio","radios","get","then","res","sortedcountry","countryObj","Object","keys","map","i","sortedArray","sort","a","b","population","length","handleRangeValue","e","target","value","handleSelectedRadio","r","filter","country","region","includes","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport Card from './Card';\n\nconst Countries = () => {\n  const [data, setData] = useState([])\n  const [sortedData, setSortedData] = useState([])\n  const [playOne, setPlayOne] = useState(true)\n  const [rangeValue, setRangeValue] = useState('40')\n  const [selectedRadio, setSelectedRadio] = useState('')\n  const radios = ['Africa', 'America', 'Europe', 'Asia', 'Oceania']\n\n  useEffect(() => {\n    if (playOne) {\n      axios.get(\"http://restcountries.eu/rest/v2/all?fields=name;population;region;capital;flag\")\n        .then(res => {\n          setData(res.data)\n          setPlayOne(false)\n        })\n    }\n    const sortedcountry = () => {\n      const countryObj = Object.keys(data).map((i) => data[i])\n      const sortedArray = countryObj.sort((a, b) => {\n        return b.population - a.population\n      })\n      sortedArray.length = rangeValue\n      setSortedData(sortedArray)\n    }\n    sortedcountry()\n  }, [data, playOne, rangeValue])\n\n\n  const handleRangeValue = (e) => {\n    setRangeValue(e.target.value)\n  }\n\n  const handleSelectedRadio = (e) => {\n    setSelectedRadio(e.target.value) \n  }\n\n  return (\n    <div className=\"countries\">\n\n     {/* ****************** Navbar with input range and button radio********************* */}\n\n      <div className=\"sort-container\">\n        <input type=\"range\" min=\"1\" max='250' value={rangeValue} onChange={handleRangeValue} />\n        <ul>\n          {\n          radios.map(r => (\n            <li key={r}>\n              <input type=\"radio\" value={r} id={r} checked={r === selectedRadio} onChange={handleSelectedRadio} />\n              <label htmlFor={r}>{r}</label> \n            </li>\n          )\n          )\n          }\n        </ul>\n      </div>\n\n      {/* ****************** Button Cancel ********************* */}\n\n      <div className=\"cancel\">\n        {selectedRadio && <h5 onClick={() => {\n          setSelectedRadio(\"\")\n        }}>Annuler la recherche</h5>}\n      </div>\n\n      {/* ****************** List Countries********************* */}\n      <ul className=\"countries-list\">\n        {sortedData\n          .filter((country) => country.region.includes(selectedRadio))\n          .map(country => (\n            <Card countrie={country} key={country.name} />\n          ))}\n      </ul>\n\n    </div>\n  );\n};\n\nexport default Countries;"]},"metadata":{},"sourceType":"module"}